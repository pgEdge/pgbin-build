#!/usr/bin/python3

import os, sys, fire
from datetime import datetime 

valid_components = ["spock40", "spock33"]
  
now = datetime.now() 
month=str(now.month).zfill(2)
day=str(now.day).zfill(2)
hour =str(now.hour).zfill(2)
min=str(now.minute).zfill(2)
sec=str(now.second).zfill(2)

TIME=(f"{month}{day}-{hour}{min}{sec}")
HD=f"up-{TIME}"
DESTINY="upstream"
CLI_BRANCH="REL24_Q2"

DEV=os.getenv("DEV")
HIST=os.getenv("HIST")
SOURCE=os.getenv("SOURCE")
PGE=os.getenv("PGE")
BLD=os.getenv("BLD")
OUT=os.getenv("OUT")

def cmd(c):
  print(f"$ {c}")
  rc = os.system(c)
  if rc != 0:
    err(f"running '{c}'")

def cd(d):
  print(f"$ cd {d}")
  try:
    rc = os.chdir(d)
  except Exception as e:
    err(str(e))

  print(f"  - {os.getcwd()}")

def err(msg):
  print(f"ERROR: {msg}")
  sys.exit(1)


def comp(name, ver, repo, branch):
  '''Push a component to UPSTREAM'''

  print(f"\n## push.comp(name={name}, ver={ver}, repo={repo}, branch={branch})")

  print("\n#0 validate parms ##################")
  if name in valid_components:
    pass
  else:
    err(f"invalid component {name}.  must be in {valid_components}")

  cmd(f' grep "{name}V={ver}" versions.sh')

  if not os.path.isdir(repo):
     cmd(f"git clone https://github.com/pgedge/{repo}")

  print("\n#1) get current repo version ########")
  cd(repo)
  cmd(f"git checkout {branch}")
  cmd("git pull")

  print("\n#2) build a tar file ################")
  zipd=f"{name}-{ver}"
  cd("..")
  cmd(f"rm -rf {zipd}")
  cmd(f"cp -pr {repo} {zipd}")
  cmd(f"rm -rf {zipd}/.git")
  cmd(f"tar czf {zipd}.tar.gz {zipd}")
  cmd(f"rm -r {zipd}")

  print("\n#3) copy to src directory ###########")
  cmd(f"cp {zipd}.tar.gz {SOURCE}/.")
  ## archive to /tmp
  cmd(f"mv {zipd}.tar.gz /tmp/{zipd}-{TIME}.tar.gz")

  print("\n#4) build from src ##################")
  cd(BLD)
  cmd("git pull")
  ## cmd(f"./build-all-components.sh {name} 15 --copy-bin")
  cmd(f"./build-all-components.sh {name} 16 --copy-bin")

  print("\n#5) assemble the extension ##########")
  cd(PGE)
  cmd(f"git checkout {CLI_BRANCH}")
  cmd(f"git pull")
  cmd(f"rm -f {OUT}/{name}*")
  ## cmd(f"./build_all.sh 15")
  cmd(f"./build_all.sh 16")

  print(f"#6) push to {DESTINY} ###############")
  hdir=f"{HIST}/{HD}"
  
  if os.path.isdir(hdir):
     err(f"{hdir} already exists")
  else:
     cmd(f"mkdir {hdir}")
  cd(DEV)
  cmd(f"cp -p {OUT}/{name}* {hdir}/.")
  cmd(f"./copy-to-{DESTINY}.sh {HD}")


if __name__ == "__main__":
    fire.Fire(
        {
            "comp": comp,
        })

